use reqwest;
use tokio;
use scraper::{ Html, Selector };
use std::fmt;

#[derive(Default)]
struct Course {
    department_id: Option<String>, // 系所代碼
    course_id: Option<String>, // 課程代碼
    p_class_type: Option<String>, // 開課部別
    stage_level: Option<i32>, // 年級
    class_type: Option<String>, // 班別
    course_name: Option<String>, // 課程名稱

    credit: Option<f32>, // 學分數
    course_type: Option<String>, // 必修、選修

    limit_number: Option<i32>, // 限修人數
    confirmed_number: Option<i32>, // 選課確定
    online_number: Option<i32>, // 線上人數

    teacher: Option<String>, // 授課教師
    course_location: Option<String>, // 上課地點
    has_other_location: Option<bool>, // 上課地點(其他) URL
    course_time: Option<String>, // 上課時間
    prerequisite: Option<String>, // 先修限修學程
    description: Option<String>, // 備註
}

impl fmt::Display for Course {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            r#"
            系所代碼: {}
            課程代碼: {}
            開課部別: {}
            年級: {}
            班別: {}
            課程名稱: {}
            學分數: {}
            必修、選修: {}
            限修人數: {}
            選課確定: {}
            線上人數: {}
            授課教師: {}
            上課地點: {}
            上課地點(其他): {}
            上課時間: {}
            先修限修學程: {}
            備註: {}
            "#,
            self.department_id,
            self.course_id,
            self.p_class_type,
            self.stage_level.unwrap_or(0),
            self.class_type.unwrap_or("".to_string()),
            self.course_name.unwrap_or("".to_string()),
            self.credit.unwrap_or(0.0),
            self.course_type.unwrap_or("".to_string()),
            self.limit_number.unwrap_or(0),
            self.confirmed_number.unwrap_or(0),
            self.online_number.unwrap_or(0),
            self.teacher.unwrap_or("".to_string()),
            self.course_location.unwrap_or("".to_string()),
            self.has_other_location.unwrap_or(false),
            self.course_time.unwrap_or("".to_string()),
            self.prerequisite.unwrap_or("".to_string()),
            self.description.unwrap_or("".to_string())
        )
    }
}

#[tokio::main]
async fn main() -> Result<(), reqwest::Error> {
    let url = "https://course.nuk.edu.tw/QueryCourse/QueryResult.asp";
    let params = [
        ("Flag", "1"),
        ("OpenYear", "112"),
        ("Helf", "2"),
        ("Pclass", "A"),
        ("Sclass", "CS"),
        ("Yclass", "A11055"),
        ("SirName", ""),
        ("Sirno", ""),
        ("WeekDay", ""),
        ("Card", ""),
        ("Subject", ""),
        ("Language", ""),
        ("Pre_Cono", ""),
        ("Coname", ""),
    ];
    let client = reqwest::Client::new();
    let resp = client.post(url).form(&params).send().await?;
    // println!("Body:{:#?}",resp.text().await?);
    let body = resp.text().await?;
    let doc = Html::parse_document(&body);
    let course_selector = Selector::parse("tr").expect("Error parsing course selector");
    let mut courses: Vec<Course> = Vec::new();

    for row in doc.select(&course_selector).skip(2) {
        let a_selector = Selector::parse(r#"a[href="javascript: void(0)"]"#).unwrap();

        let mut course: Course = Default::default();
        let mut cells_text: Vec<String> = Vec::new();
        for cell in row.select(&Selector::parse("td").unwrap()) {
            let cell_text = cell.text().collect::<Vec<_>>().join("");
            // 檢查是否存在特定的<a>標籤
            if cell.select(&a_selector).next().is_some() {
                course.has_other_location = Some(true);
            } else {
                cells_text.push(cell_text);
            }
        }

        course.department_id = Some(cells_text[0].clone());
        course.course_id = Some(cells_text[1].clone());
        course.p_class_type = Some(cells_text[2].clone());
        course.stage_level = Some(cells_text[3].parse::<i32>().unwrap());
        course.class_type = Some(cells_text[4].clone());
        course.course_name = Some(cells_text[5].clone());
        course.credit = Some(cells_text[6].parse::<f32>().unwrap());
        course.course_type = Some(cells_text[7].clone());
        course.limit_number = Some(cells_text[8].parse::<i32>().unwrap());
        course.confirmed_number = Some(cells_text[9].parse::<i32>().unwrap());
        course.online_number = Some(cells_text[10].parse::<i32>().unwrap());
        course.teacher = Some(cells_text[11].clone());
        course.course_location = Some(cells_text[12].clone());
        course.course_time = Some(cells_text[13].clone());
        course.prerequisite = Some(cells_text[14].clone());
        course.description = Some(cells_text[15].clone());

        courses.push(course);
    }

    for course in courses {
        println!("{}", course);
    }

    Ok(())
}
